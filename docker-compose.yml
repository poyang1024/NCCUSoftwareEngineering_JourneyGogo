services:
  proxy:
    image: traefik:v2.9
    networks:
      - ${TRAEFIK_PUBLIC_NETWORK}
      - default
    ports:
      - 443:443
      - 80:80
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./letsencrypt:/letsencrypt
    command:
      - --log.level=INFO
      - --providers.docker
      - --providers.docker.exposedbydefault=false
      - --accesslog
      - --log
      - --api
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --certificatesresolvers.le.acme.tlschallenge=true
      - --certificatesresolvers.le.acme.email=${TRAEFIK_TLS_EMAIL}
      - --certificatesresolvers.le.acme.storage=/letsencrypt/acme.json
    labels:
      traefik.enable: true
      traefik.docker.network: ${TRAEFIK_PUBLIC_NETWORK}
      traefik.http.routers.http-catchall.rule: HostRegexp(`{host:(www\.)?${DOMAIN}}`)
      traefik.http.routers.http-catchall.entrypoints: web
      traefik.http.routers.http-catchall.middlewares: wwwtohttps

      traefik.http.routers.wwwsecure-catchall.rule: HostRegexp(`{host:(www\.)${DOMAIN}}`)
      traefik.http.routers.wwwsecure-catchall.entrypoints: websecure
      traefik.http.routers.wwwsecure-catchall.tls: true
      traefik.http.routers.wwwsecure-catchall.middlewares: wwwtohttps

      traefik.http.middlewares.wwwtohttps.redirectregex.regex: ^https?://(?:www\.)?(.+)
      traefik.http.middlewares.wwwtohttps.redirectregex.replacement: https://$${1}
      traefik.http.middlewares.wwwtohttps.redirectregex.permanent: true

  backend:
    image: '${DOCKER_PACKAGE_REPOSITORY}/${DOCKER_IMAGE_BACKEND}:${TAG-latest}'
    depends_on:
      - db
    env_file:
      - .env
    environment:
      - SERVER_NAME=${DOMAIN}
      - SERVER_HOST=https://${DOMAIN}
    volumes:
      - app-static-data:/app/static
    build:
      context: ./backend
      dockerfile: Dockerfile
      args:
        INSTALL_DEV: ${INSTALL_DEV-false}
    command: /start-reload.sh
    labels:
      traefik.enable: true
      traefik.http.routers.${STACK_NAME}-backend-http.rule: PathPrefix(`/api`) || PathPrefix(`/docs`) || PathPrefix(`/redoc`)
      traefik.http.routers.${STACK_NAME}-backend-http.entrypoints: websecure
      traefik.http.routers.${STACK_NAME}-backend-http.tls: true
      traefik.http.routers.${STACK_NAME}-backend-http.tls.certresolver: le

  db:
    image: postgres:latest
    restart: always
    volumes:
      - app-db-data:/var/lib/postgresql/data/pgdata
    env_file:
      - .env
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}"
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - PGDATA=/var/lib/postgresql/data/pgdata

  frontend:
    image: '${DOCKER_PACKAGE_REPOSITORY}/${DOCKER_IMAGE_FRONTEND}:${TAG-latest}'
    build:
      context: ./frontend
      args:
        - FRONTEND_ENV=${FRONTEND_ENV-production}
        - VITE_BACKEND_API_URL
        - VITE_GA_TRACKING_ID
        - VITE_PWD_SIGNUP_ENABLED
    env_file:
      - .env
    labels:
      traefik.enable: true
      traefik.http.routers.${STACK_NAME}-frontend-http.rule: PathPrefix(`/`)
      traefik.http.routers.${STACK_NAME}-frontend-http.entrypoints: websecure
      traefik.http.routers.${STACK_NAME}-frontend-http.tls: true
      traefik.http.routers.${STACK_NAME}-frontend-http.tls.certresolver: le

volumes:
  app-db-data:
  app-static-data:


networks:
  traefik-public:
    external: ${TRAEFIK_PUBLIC_NETWORK_IS_EXTERNAL-true}
